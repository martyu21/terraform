on:
  issues:
    types: [opened]

jobs:
  deploy_vm:
    runs-on: self-hosted
    env:
      TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_password: ${{ secrets.USERPWD }}

    steps:

      - name: Debug Issue Body
        run: echo "${{ github.event.issue.body }}"
     
      - name: Parse IssueOps Form
        id: parser
        uses: issue-ops/parser@v1
        with:
          body: ${{ github.event.issue.body }}

      - name: Extract VM name
        run: |
          echo "ACTION=${{ fromJson(steps.parser.outputs.json).action }}" >> $GITHUB_ENV
          echo "VM_NAME=${{ fromJson(steps.parser.outputs.json).vm_name }}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./modules/azure_vm

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./modules/azure_vm

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./modules/azure_vm

      - name: Terraform Plan
        if: env.ACTION == 'plan'
        run: terraform plan -input=false -out=tfplan  -var "vm_name=${{ env.VM_NAME }}"
        working-directory: ./modules/azure_vm

      - name: Terraform Apply
        if: env.ACTION == 'plan'
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: ./modules/azure_vm

      - name: Terraform Destroy
        if: env.ACTION == 'destroy'
        run: terraform destroy -auto-approve -var="vm_name=${{ env.VM_NAME }}"
        working-directory: ./modules/azure_vm
